import './employee-list.css';
import EmployeeItem from '../employee-item/employee-item';

function EmployeeList ({employees}) {
    const employeesItems = employees.map((employee, id) => {
        return <EmployeeItem key={id} {...employee}/> 
    });
    // Про властивість key у схожих елементах та алгоритм погодження
    //У virtual DOM, навідміну від DOM при зміненні батьківського елементу, дочірні елементи перемальовуються тільки ті - що зазнали змін. Під капотом реакт у випадку змін у батьківському елементі, запам'ятовує його дочірні елементи і порівнює з тими, що повинні з'явитись під час змін. Порівнює він їх за значенням за умовчки, якщо не вказати властивість key. Звісно, що якщо порівняння буде тільки за значенням, то є ризик, що порівняння буде некорректним через порушення послідовності та дочірні елементи будуть перемальовуватись повністю, навіть якщо реальних змін в них не було і у такому випадку буде втрачена оптимізація. Властивість key дозволяє надати дочірнім елементам ідетифікатор, за яким буде відбуватись порівняння, з ним можна уникнути проблем з послідовністю дочірніх елементів. Ідетифікатор варто брати з бекенду, при отриманні даних, але у випадку, якщо такого не передбачено, то можна надати ідентифікатори через функції map filter у масиві. Ідетифікатор має бути унікальним, але тільки у рамках батьківського елементу.

    return (
    <ul className="employee-list">
        {employeesItems}
    </ul>
    );
}

export default EmployeeList;